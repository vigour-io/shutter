{
  "name": "vigour-shutter",
  "version": "3.0.1",
  "author": "Vigour <dev@vigour.io>",
  "repository": {
    "type": "git",
    "url": "https://github.com/vigour-io/shutter.git"
  },
  "main": "./lib/index.js",
  "bin": {
    "shutter": "./bin/index.js"
  },
  "scripts": {
    "start": "./bin/index.js",
    "debug": "./bin/index.js --debug",
    "test": "gaston test -r node -s ./test/node",
    "clean": "./bin/index.js -x"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "directories": {
    "test": "test"
  },
  "description": "Makes a sprite out of an array of urls",
  "bugs": {
    "url": "https://github.com/vigour-io/shutter/issues"
  },
  "homepage": "https://github.com/vigour-io/shutter",
  "dependencies": {
    "aws-sdk": "^2.2.42",
    "diskspace": "^0.1.7",
    "express": "^4.7.4",
    "express-validator": "^2.4.0",
    "github-markdown-css": "^2.0.9",
    "gm": "^1.16.0",
    "lodash": "3.10.x",
    "marked": "^0.3.3",
    "npmlog": "^0.1.1",
    "promise": "^6.1.0",
    "query-string": "^2.4.1",
    "rimraf": "^2.2.8",
    "vigour-config": "~0.0.13",
    "vigour-fs-promised": "^2.0.0",
    "vigour-js": "^0.4.4",
    "vigour-spawn": "^1.0.6",
    "vigour-util": "^1.3.0"
  },
  "keywords": [
    "javascript",
    "sprites",
    "graphicsMagick"
  ],
  "contributors": [
    "Shawn Inder <shawn@vigour.io>",
    "Boite Witte <boite@vigour.io>"
  ],
  "license": "MIT",
  "gaston": {
    "port": 8080,
    "socket-port": 9000,
    "no-auto-reload": false,
    "no-package": false,
    "bundle": "./",
    "build": "./",
    "browserify": {
      "transforms": []
    },
    "less": {
      "options": {}
    },
    "remote-logging": false,
    "require-paths": {},
    "source-maps": true
  },
  "vigour": {
    "maxCols": {
      "val": 10
    },
    "maxTries": {
      "val": 6
    },
    "invalidRequestMessage": {
      "val": "Invalid request. Make sure you are respecting the api (https://github.com/vigour-io/shutter/blob/master/README.md#user-content-api) and that the requested data exists."
    },
    "port": {
      "val": 8000,
      "_env": "IMG_PORT",
      "_description": "Port on which the server should listen"
    },
    "maxWidth": {
      "val": 10000
    },
    "maxHeight": {
      "val": 10000
    },
    "minFreeSpace": {
      "val": 0.01
    },
    "convertPath": {
      "val": "/usr/bin/convert",
      "_env": "IMG_CONVERT_PATH",
      "_description": "Path to Image Magick's `convert` executable"
    },
    "identifyPath": {
      "val": "/usr/bin/identify",
      "_env": "IMG_IDENTIFY_PATH",
      "_description": "Path to Image Magick's `identify` executable"
    },
    "clean": {
      "val": false,
      "_description": "Removes all downloaded originals, produced images and temporary folders and files, then exits"
    },
    "manip": {},
    "verbose": {
      "val": false,
      "_env": "IMG_VERBOSE",
      "_description": "Logs successful requests"
    },
    "remote": {
      "val": "img.vigour.io",
      "_description": "url for the remote image server to use for image manipulations"
    },
    "remotePort": {
      "val": 80,
      "_description": "port on which to reach the remote image server"
    },
    "fallbacks": {
      "_description": "json string describing fallback images. see README.md"
    },
    "retryOn404": {
      "val": false
    },
    "aws": {
      "accessKeyId": {
        "val": false,
        "description": "Access Key ID for authenticating requests against AWS",
        "_env": "SHUTTER_AWS_ACCESS_KEY_ID"
      },
      "secretAccessKey": {
        "val": false,
        "description": "Secret Access Key for authenticating requests against AWS",
        "_env": "SHUTTER_AWS_SECRET_ACCESS_KEY"
      },
      "cloudfront": {
        "apiVersion": {
          "val": "2016-01-28",
          "description": "aws-sdk api version to use when invalidating cloudfront assets"
        },
        "distributionId": {
          "val": false,
          "description": "ID of the distribution on CloudFront on which to perform invalidations",
          "_env": "SHUTTER_CLOUDFRONT_DISTRIBUTION_ID"
        }
      }
    }
  },
  "standard": {
    "globals": [
      "describe",
      "it",
      "expect",
      "before",
      "after",
      "beforeEach",
      "afterEach",
      "sinon"
    ]
  },
  "services": {
    "sentinel": {
      "branches": [],
      "unignoreFolders": []
    }
  }
}
